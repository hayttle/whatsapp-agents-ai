// Script para limpar usu√°rios √≥rf√£os do Supabase Auth
// Execute com: node cleanup-auth-users.js

// Carregar vari√°veis de ambiente do Next.js
require('dotenv').config({ path: '.env.local' });
require('dotenv').config({ path: '.env' });

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  console.log('Certifique-se de que NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o definidas');
  console.log('Verifique se existe um arquivo .env.local ou .env');
  console.log('');
  console.log('Exemplo de .env.local:');
  console.log('NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co');
  console.log('SUPABASE_SERVICE_ROLE_KEY=your-service-role-key');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function cleanupOrphanedAuthUsers() {
  try {
    console.log('üîç Iniciando limpeza de usu√°rios √≥rf√£os...');

    // 1. Buscar todos os usu√°rios do Supabase Auth
    console.log('üìã Buscando usu√°rios do Supabase Auth...');
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Erro ao buscar usu√°rios do Auth:', authError);
      return;
    }

    console.log(`üìä Encontrados ${authUsers.users.length} usu√°rios no Auth`);

    // 2. Buscar todos os usu√°rios da tabela users
    console.log('üìã Buscando usu√°rios da tabela users...');
    const { data: dbUsers, error: dbError } = await supabase
      .from('users')
      .select('id');

    if (dbError) {
      console.error('‚ùå Erro ao buscar usu√°rios da tabela:', dbError);
      return;
    }

    const dbUserIds = new Set(dbUsers.map(user => user.id));
    console.log(`üìä Encontrados ${dbUsers.length} usu√°rios na tabela users`);

    // 3. Identificar usu√°rios √≥rf√£os (existem no Auth mas n√£o na tabela)
    const orphanedUsers = authUsers.users.filter(authUser => !dbUserIds.has(authUser.id));
    
    console.log(`üîç Encontrados ${orphanedUsers.length} usu√°rios √≥rf√£os`);

    if (orphanedUsers.length === 0) {
      console.log('‚úÖ Nenhum usu√°rio √≥rf√£o encontrado!');
      return;
    }

    // Mostrar lista de usu√°rios √≥rf√£os
    console.log('\nüìã Usu√°rios √≥rf√£os encontrados:');
    orphanedUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.email} (${user.id}) - Criado em: ${new Date(user.created_at).toLocaleString()}`);
    });

    // 4. Deletar usu√°rios √≥rf√£os
    console.log('\nüóëÔ∏è Deletando usu√°rios √≥rf√£os...');
    let deletedCount = 0;
    let errorCount = 0;

    for (const user of orphanedUsers) {
      try {
        console.log(`üóëÔ∏è Deletando usu√°rio: ${user.email} (${user.id})`);
        
        const { error } = await supabase.auth.admin.deleteUser(user.id);
        
        if (error) {
          console.error(`‚ùå Erro ao deletar ${user.email}:`, error.message);
          errorCount++;
        } else {
          console.log(`‚úÖ Deletado com sucesso: ${user.email}`);
          deletedCount++;
        }
      } catch (err) {
        console.error(`‚ùå Exce√ß√£o ao deletar ${user.email}:`, err.message);
        errorCount++;
      }
    }

    console.log('\nüìä Resumo da limpeza:');
    console.log(`‚úÖ Usu√°rios deletados: ${deletedCount}`);
    console.log(`‚ùå Erros: ${errorCount}`);
    console.log(`üìã Total de √≥rf√£os: ${orphanedUsers.length}`);

    if (errorCount > 0) {
      console.log('\n‚ö†Ô∏è Alguns usu√°rios n√£o puderam ser deletados. Verifique os logs acima.');
    } else {
      console.log('\nüéâ Limpeza conclu√≠da com sucesso!');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar limpeza
cleanupOrphanedAuthUsers(); 